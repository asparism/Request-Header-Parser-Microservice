 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

// call packages
var fs = require('fs');
var express = require('express');
const os = require('os');
const requestIP = require('request-ip');
const ip = require('ip');
const useragent = require('express-useragent');

var app = express();


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

const requestIp = require('request-ip');
app.use(requestIp.mw())
 
app.use(function(req, res, next) {
  res.locals.ip = req.clientIp;
    next();
});

app.use(useragent.express());
app.use(function(req, res, next){
  res.locals.os = req.useragent.os;
  next();
})

app.use(function(req, res) {
  var languages = req.headers["accept-language"];
  var languagesArray = languages.split(',');
  var primaryLanguage = languagesArray[0];
  var rhpObj = {"ip" : res.locals.ip, "os" : res.locals.os, "language" : primaryLanguage};
  res.json(rhpObj);
})

// middleware ??
app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

